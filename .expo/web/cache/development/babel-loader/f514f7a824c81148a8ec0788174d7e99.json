{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport isObject from 'lodash.isobject';\nvar LocalStorage = {\n  getItem: function getItem(key) {\n    if (!key) return false;\n    return toJson(AsyncStorage.getItem(key));\n  },\n  setItem: function setItem(key, value) {\n    if (!key) return false;\n    AsyncStorage.setItem(key, toString(value));\n    return {\n      key: value\n    };\n  },\n  removeItem: function removeItem(key) {\n    if (!key || !AsyncStorage.getItem(key)) return false;\n    return AsyncStorage.removeItem(key);\n  },\n  getAllItems: function getAllItems() {\n    return AsyncStorage.getAllKeys();\n  },\n  getData: function getData(key) {\n    var value;\n    return _regeneratorRuntime.async(function getData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(key));\n\n          case 3:\n            value = _context.sent;\n\n            if (!(value !== null)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 6:\n            return _context.abrupt(\"return\", value);\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  }\n};\n\nvar toJson = function toJson(value) {\n  if (isObject(value)) return value;\n\n  try {\n    var json = JSON.parse(value);\n    return json;\n  } catch (e) {\n    console.error();\n    'Fail to convert string to JSON', e;\n    return false;\n  }\n};\n\nvar toString = function toString(string) {\n  try {\n    var json = JSON.stringify(string);\n    return json;\n  } catch (e) {\n    console.error();\n    'Fail to convert JSON to String', e;\n    return false;\n  }\n};\n\nexport default LocalStorage;","map":{"version":3,"sources":["D:/Projects/mu/mu-expo/stores/local.store.js"],"names":["AsyncStorage","isObject","LocalStorage","getItem","key","toJson","setItem","value","toString","removeItem","getAllItems","getAllKeys","getData","json","JSON","parse","e","console","error","string","stringify"],"mappings":";AAAA,OAAOA,YAAP,MAAyB,2CAAzB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,iBAACC,GAAD,EAAO;AACZ,QAAI,CAACA,GAAL,EAAU,OAAO,KAAP;AACV,WAAOC,MAAM,CAACL,YAAY,CAACG,OAAb,CAAqBC,GAArB,CAAD,CAAb;AACH,GAJgB;AAKjBE,EAAAA,OAAO,EAAE,iBAACF,GAAD,EAAMG,KAAN,EAAc;AACnB,QAAI,CAACH,GAAL,EAAU,OAAO,KAAP;AACVJ,IAAAA,YAAY,CAACM,OAAb,CAAqBF,GAArB,EAA0BI,QAAQ,CAACD,KAAD,CAAlC;AACA,WAAO;AAACH,MAAAA,GAAG,EAAEG;AAAN,KAAP;AACH,GATgB;AAUjBE,EAAAA,UAAU,EAAE,oBAACL,GAAD,EAAO;AACf,QAAI,CAACA,GAAD,IAAQ,CAACJ,YAAY,CAACG,OAAb,CAAqBC,GAArB,CAAb,EAAwC,OAAO,KAAP;AACxC,WAAOJ,YAAY,CAACS,UAAb,CAAwBL,GAAxB,CAAP;AACH,GAbgB;AAcjBM,EAAAA,WAAW,EAAE;AAAA,WAAKV,YAAY,CAACW,UAAb,EAAL;AAAA,GAdI;AAejBC,EAAAA,OAAO,EAAG,iBAAOR,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEgBJ,YAAY,CAACG,OAAb,CAAqBC,GAArB,CAFhB;;AAAA;AAEEG,YAAAA,KAFF;;AAAA,kBAGDA,KAAK,KAAK,IAHT;AAAA;AAAA;AAAA;;AAAA,6CAIO,KAJP;;AAAA;AAAA,6CAOGA,KAPH;;AAAA;AAAA;AAAA;AAAA,6CASK,KATL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfO,CAArB;;AA8BA,IAAMF,MAAM,GAAG,SAATA,MAAS,CAACE,KAAD,EAAW;AACtB,MAAIN,QAAQ,CAACM,KAAD,CAAZ,EAAqB,OAAOA,KAAP;;AACrB,MAAI;AACA,QAAMM,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAX,CAAb;AACA,WAAOM,IAAP;AACH,GAHD,CAGE,OAAOG,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR;AAAiB,sCAAkCF,CAAnC;AAChB,WAAO,KAAP;AACH;AACJ,CATD;;AAWA,IAAMR,QAAQ,GAAG,SAAXA,QAAW,CAACW,MAAD,EAAY;AACzB,MAAI;AACA,QAAMN,IAAI,GAAGC,IAAI,CAACM,SAAL,CAAeD,MAAf,CAAb;AACA,WAAON,IAAP;AACH,GAHD,CAGE,OAAOG,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR;AAAiB,sCAAkCF,CAAnC;AAChB,WAAO,KAAP;AACH;AACJ,CARD;;AAUA,eAAed,YAAf","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage'\r\nimport isObject from 'lodash.isobject'\r\n\r\nconst LocalStorage = {\r\n    getItem: (key)=>{\r\n        if (!key) return false\r\n        return toJson(AsyncStorage.getItem(key))\r\n    },\r\n    setItem: (key, value)=>{\r\n        if (!key) return false\r\n        AsyncStorage.setItem(key, toString(value))\r\n        return {key: value}\r\n    },\r\n    removeItem: (key)=>{\r\n        if (!key || !AsyncStorage.getItem(key)) return false\r\n        return AsyncStorage.removeItem(key)\r\n    },\r\n    getAllItems: ()=> AsyncStorage.getAllKeys(),\r\n    getData : async (key) => {\r\n        try {\r\n          const value = await AsyncStorage.getItem(key)\r\n          if(value !== null) {\r\n              return false\r\n            // value previously stored\r\n          }\r\n          return value\r\n        } catch(e) {\r\n            return false\r\n          // error reading value\r\n        }\r\n      }\r\n}\r\n\r\nconst toJson = (value) => {\r\n    if (isObject(value)) return value\r\n    try {\r\n        const json = JSON.parse(value)\r\n        return json;\r\n    } catch (e) {\r\n        console.error();('Fail to convert string to JSON', e)\r\n        return false\r\n    }\r\n}\r\n\r\nconst toString = (string) => {\r\n    try {\r\n        const json = JSON.stringify(string)\r\n        return json;\r\n    } catch (e) {\r\n        console.error();('Fail to convert JSON to String', e)\r\n        return false\r\n    }\r\n}\r\n\r\nexport default LocalStorage"]},"metadata":{},"sourceType":"module"}