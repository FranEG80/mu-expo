{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Projects\\\\mu\\\\mu-expo\\\\navigations\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport Auth from \"./auth-navigator\";\nimport Commons from \"./common-navigators\";\nimport User from \"./user-navigators\";\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport LogIn from \"../services/auth.service\";\nimport { authenticate } from \"../services/\";\nvar isLoggedIn = true;\nvar Stack = createStackNavigator();\nvar configs = {\n  screenOptions: _objectSpread(_objectSpread({}, Commons.configs.screenOptions), isLoggedIn ? User.configs.screenOptions : Auth.configs.screenOptions)\n};\nconsole.log(configs);\n\nvar AppNavigator = function AppNavigator() {\n  var _useState = useState({\n    user: null,\n    isLoggedIn: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      user = _useState2$.user,\n      isLoggedIn = _useState2$.isLoggedIn,\n      setUser = _useState2[1];\n\n  useEffect(function () {\n    setTimeout(handleLogin, 2500);\n  }, []);\n\n  var handleLogin = function handleLogin() {\n    return LogIn().then(function (user) {\n      return setUser({\n        user: user,\n        isLoggedIn: true\n      });\n    }).catch(function (e) {\n      return console.error(e);\n    });\n  };\n\n  return React.createElement(Stack.Navigator, _extends({\n    initialRouteName: \"Home\"\n  }, configs, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), Object.entries(_objectSpread(_objectSpread({}, Commons.screens), !isLoggedIn ? User.screens : Auth.screens)).map(function (_ref, index) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        component = _ref2[1];\n\n    return React.createElement(Stack.Screen, {\n      key: index,\n      name: name,\n      component: component,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    });\n  }));\n};\n\nexport default AppNavigator;","map":{"version":3,"sources":["D:/Projects/mu/mu-expo/navigations/index.js"],"names":["React","createStackNavigator","Auth","Commons","User","useState","useEffect","LogIn","authenticate","isLoggedIn","Stack","configs","screenOptions","console","log","AppNavigator","user","setUser","setTimeout","handleLogin","then","catch","e","error","Object","entries","screens","map","index","name","component"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP;AACA,SAASC,YAAT;AAEA,IAAMC,UAAU,GAAG,IAAnB;AAEA,IAAMC,KAAK,GAAGT,oBAAoB,EAAlC;AAEA,IAAMU,OAAO,GAAG;AACZC,EAAAA,aAAa,kCACNT,OAAO,CAACQ,OAAR,CAAgBC,aADV,GAELH,UAAU,GAAGL,IAAI,CAACO,OAAL,CAAaC,aAAhB,GAAgCV,IAAI,CAACS,OAAL,CAAaC,aAFlD;AADD,CAAhB;AAQAC,OAAO,CAACC,GAAR,CAAYH,OAAZ;;AAEA,IAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA,kBACeV,QAAQ,CAAC;AAACW,IAAAA,IAAI,EAAE,IAAP;AAAaP,IAAAA,UAAU,EAAE;AAAzB,GAAD,CADvB;AAAA;AAAA;AAAA,MACfO,IADe,eACfA,IADe;AAAA,MACTP,UADS,eACTA,UADS;AAAA,MACIQ,OADJ;;AAGvBX,EAAAA,SAAS,CAAC,YAAU;AAChBY,IAAAA,UAAU,CAACC,WAAD,EAAc,IAAd,CAAV;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAMZ,KAAK,GAAGa,IAAR,CAAa,UAAAJ,IAAI;AAAA,aAAIC,OAAO,CAAC;AAACD,QAAAA,IAAI,EAAJA,IAAD;AAAOP,QAAAA,UAAU,EAAC;AAAlB,OAAD,CAAX;AAAA,KAAjB,EAAuDY,KAAvD,CAA6D,UAAAC,CAAC;AAAA,aAAIT,OAAO,CAACU,KAAR,CAAcD,CAAd,CAAJ;AAAA,KAA9D,CAAN;AAAA,GAApB;;AAEA,SACI,oBAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,gBAAgB,EAAC;AAAlC,KACQX,OADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGKa,MAAM,CAACC,OAAP,iCACMtB,OAAO,CAACuB,OADd,GAEO,CAACjB,UAAD,GAAcL,IAAI,CAACsB,OAAnB,GAA6BxB,IAAI,CAACwB,OAFzC,GAGEC,GAHF,CAGM,gBAAoBC,KAApB;AAAA;AAAA,QAAEC,IAAF;AAAA,QAAQC,SAAR;;AAAA,WACH,oBAAC,KAAD,CAAO,MAAP;AACI,MAAA,GAAG,EAAEF,KADT;AAEI,MAAA,IAAI,EAAEC,IAFV;AAGI,MAAA,SAAS,EAAEC,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG;AAAA,GAHN,CAHL,CADJ;AAiBH,CA1BD;;AA4BA,eAAef,YAAf","sourcesContent":["\r\nimport React from 'react'\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport Auth from \"./auth-navigator\";\r\nimport Commons from \"./common-navigators\";\r\nimport User from \"./user-navigators\";\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport LogIn from '../services/auth.service';\r\nimport { authenticate } from '../services/'\r\n\r\nconst isLoggedIn = true;\r\n\r\nconst Stack = createStackNavigator()\r\n\r\nconst configs = {\r\n    screenOptions: {\r\n        ...Commons.configs.screenOptions,\r\n        ...(isLoggedIn ? User.configs.screenOptions : Auth.configs.screenOptions)\r\n    }\r\n    \r\n}\r\n\r\nconsole.log(configs)\r\n\r\nconst AppNavigator = () => {\r\n    const [{user, isLoggedIn}, setUser] = useState({user: null, isLoggedIn: false})\r\n\r\n    useEffect(function(){\r\n        setTimeout(handleLogin, 2500)\r\n    }, [])\r\n\r\n    const handleLogin = () => LogIn().then(user => setUser({user, isLoggedIn:true})).catch(e => console.error(e))\r\n\r\n    return (\r\n        <Stack.Navigator initialRouteName=\"Home\"\r\n            {...configs}\r\n        >\r\n            {Object.entries({\r\n                ...Commons.screens,\r\n                ...(!isLoggedIn ? User.screens : Auth.screens)\r\n            }).map(([name, component], index)=>(\r\n                <Stack.Screen \r\n                    key={index}\r\n                    name={name} \r\n                    component={component} \r\n                    \r\n                />\r\n            ))}\r\n        </Stack.Navigator>    \r\n       )\r\n}\r\n\r\nexport default AppNavigator"]},"metadata":{},"sourceType":"module"}