{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Projects\\\\mu\\\\mu-expo\\\\navigations\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport Auth from \"./auth-navigator\";\nimport Commons from \"./common-navigators\";\nimport User from \"./user-navigators\";\nimport { NavigationContainer } from '@react-navigation/native';\nvar isLoggedIn = false;\nvar Stack = createStackNavigator();\n\nvar AppNavigator = function AppNavigator() {\n  return React.createElement(NavigationContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, React.createElement(Stack.Navigator, {\n    initialRouteName: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, Object.entries(_objectSpread(_objectSpread({}, Commons.screens), isLoggedIn ? User.screens : Auth.screens)).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        component = _ref2[1];\n\n    return React.createElement(Stack.Screen, {\n      name: name,\n      component: component,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }\n    });\n  })));\n};\n\nexport default AppNavigator;","map":{"version":3,"sources":["D:/Projects/mu/mu-expo/navigations/index.js"],"names":["React","createStackNavigator","Auth","Commons","User","NavigationContainer","isLoggedIn","Stack","AppNavigator","Object","entries","screens","map","name","component"],"mappings":";;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,yBAArC;AACA,OAAOC,IAAP;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,IAAMC,UAAU,GAAG,KAAnB;AAEA,IAAMC,KAAK,GAAGN,oBAAoB,EAAlC;;AAEA,IAAMO,YAAY,GAAG,SAAfA,YAAe;AAAA,SACjB,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,SAAP;AAAiB,IAAA,gBAAgB,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMKC,MAAM,CAACC,OAAP,iCACMP,OAAO,CAACQ,OADd,GAEOL,UAAU,GAAGF,IAAI,CAACO,OAAR,GAAkBT,IAAI,CAACS,OAFxC,GAGEC,GAHF,CAGM;AAAA;AAAA,QAAEC,IAAF;AAAA,QAAQC,SAAR;;AAAA,WACH,oBAAC,KAAD,CAAO,MAAP;AACI,MAAA,IAAI,EAAED,IADV;AAEI,MAAA,SAAS,EAAEC,SAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADG;AAAA,GAHN,CANL,CADJ,CADiB;AAAA,CAArB;;AAsBA,eAAeN,YAAf","sourcesContent":["\r\nimport React from 'react'\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport Auth from \"./auth-navigator\";\r\nimport Commons from \"./common-navigators\";\r\nimport User from \"./user-navigators\";\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n\r\nconst isLoggedIn = false;\r\n\r\nconst Stack = createStackNavigator()\r\n\r\nconst AppNavigator = () => (\r\n    <NavigationContainer>\r\n        <Stack.Navigator initialRouteName\r\n            // {...{\r\n            //     ...Commons.configs,\r\n            //     ...(isLoggedIn ? User.screens : Auth.configs)\r\n            // }}\r\n        >\r\n            {Object.entries({\r\n                ...Commons.screens,\r\n                ...(isLoggedIn ? User.screens : Auth.screens)\r\n            }).map(([name, component])=>(\r\n                <Stack.Screen \r\n                    name={name} \r\n                    component={component} \r\n                />\r\n            ))}\r\n        </Stack.Navigator>\r\n    </NavigationContainer>\r\n    \r\n)\r\n\r\nexport default AppNavigator"]},"metadata":{},"sourceType":"module"}