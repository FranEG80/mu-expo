{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar API_URL = 'http://localhost:3000/authenticate';\n\nvar LogIn = function LogIn(user) {\n  return fetch(API_URL, {\n    method: 'POST',\n    body: JSON.stringify({\n      email: 'paco@mu-project.org',\n      password: 'aaBB1234*'\n    }),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(function (res) {\n    return res.json();\n  }).catch(function (error) {\n    return console.error('Error:', error);\n  }).then(function (response) {\n    return response;\n  });\n};\n\nwindow['logUser'] = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            return fetch(API_URL, {\n              method: 'POST',\n              body: JSON.stringify({\n                email: 'paco@mu-project.org',\n                password: 'aaBB1234*'\n              }),\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (res) {\n              return res.json();\n            }).catch(function (error) {\n              return console.error('Error:', error);\n            }).then(function (response) {\n              resolve(response);\n            });\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default LogIn;","map":{"version":3,"sources":["D:/Projects/mu/mu-expo/services/auth.service.js"],"names":["API_URL","LogIn","user","fetch","method","body","JSON","stringify","email","password","headers","then","res","json","catch","error","console","response","window","Promise","resolve","reject"],"mappings":";AAAA,IAAMA,OAAO,GAAG,oCAAhB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAU;AACpB,SAAOC,KAAK,CAACH,OAAD,EAAU;AAClBI,IAAAA,MAAM,EAAE,MADU;AAElBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,KAAK,EAAE,qBADU;AAEjBC,MAAAA,QAAQ,EAAE;AAFO,KAAf,CAFY;AAMlBC,IAAAA,OAAO,EAAC;AACN,sBAAgB;AADV;AANU,GAAV,CAAL,CAUNC,IAVM,CAUD,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GAVF,EAWNC,KAXM,CAWA,UAAAC,KAAK;AAAA,WAAIC,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAAJ;AAAA,GAXL,EAYNJ,IAZM,CAYD,UAAAM,QAAQ,EAAI;AACd,WAAOA,QAAP;AACH,GAdM,CAAP;AAgBH,CAjBD;;AAmBAC,MAAM,CAAC,SAAD,CAAN,GAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAAkB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,mBAAqBlB,KAAK,CAACH,OAAD,EAAU;AAClFI,cAAAA,MAAM,EAAE,MAD0E;AAElFC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,gBAAAA,KAAK,EAAE,qBADU;AAEjBC,gBAAAA,QAAQ,EAAE;AAFO,eAAf,CAF4E;AAMlFC,cAAAA,OAAO,EAAC;AACN,gCAAgB;AADV;AAN0E,aAAV,CAAL,CAUtEC,IAVsE,CAUjE,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aAV8D,EAWtEC,KAXsE,CAWhE,UAAAC,KAAK;AAAA,qBAAIC,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAAJ;AAAA,aAX2D,EAYtEJ,IAZsE,CAYjE,UAAAM,QAAQ,EAAI;AACdG,cAAAA,OAAO,CAACH,QAAD,CAAP;AACH,aAdsE,CAArB;AAAA,WAAZ,CAAlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB;;AAkBA,eAAehB,KAAf","sourcesContent":["const API_URL = 'http://localhost:3000/authenticate' // process.env.REACT_NATIVE_API_URL + '/authenticate'\r\n\r\nconst LogIn = (user) => {\r\n    return fetch(API_URL, {\r\n        method: 'POST', // or 'PUT'\r\n        body: JSON.stringify({\r\n            email: 'paco@mu-project.org',\r\n            password: 'aaBB1234*'\r\n        }), // data can be `string` or {object}!\r\n        headers:{\r\n          'Content-Type': 'application/json'\r\n        }\r\n    })\r\n    .then(res => res.json())\r\n    .catch(error => console.error('Error:', error))\r\n    .then(response => {\r\n        return response\r\n    });\r\n\r\n}\r\n\r\nwindow['logUser'] = async () => await new Promise((resolve, reject) => fetch(API_URL, {\r\n    method: 'POST', // or 'PUT'\r\n    body: JSON.stringify({\r\n        email: 'paco@mu-project.org',\r\n        password: 'aaBB1234*'\r\n    }), // data can be `string` or {object}!\r\n    headers:{\r\n      'Content-Type': 'application/json'\r\n    }\r\n})\r\n.then(res => res.json())\r\n.catch(error => console.error('Error:', error))\r\n.then(response => {\r\n    resolve(response)\r\n})\r\n\r\n)\r\n\r\nexport default LogIn"]},"metadata":{},"sourceType":"module"}